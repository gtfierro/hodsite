<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>HodDB</title>
    <link>http://hoddb.org/index.xml</link>
    <description>Recent content on HodDB</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://hoddb.org/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Installation</title>
      <link>http://hoddb.org/installation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://hoddb.org/installation/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#docker&#34;&gt;Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#binary&#34;&gt;Binary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#source&#34;&gt;Source&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&#34;docker&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;docker&#34;&gt;Docker&lt;/h3&gt;

&lt;p&gt;If you have &lt;a href=&#34;https://docs.docker.com/engine/installation/&#34;&gt;Docker installed&lt;/a&gt;, then HodDB can be started by first pulling the latest &lt;code&gt;gtfierro/hod&lt;/code&gt; Docker image and then starting it with the appropriate parameters.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker pull gtfierro/hod
$ docker run -d --name hoddb -p47808:47808 gtfierro/hod
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This Docker image comes with the &lt;a href=&#34;https://raw.githubusercontent.com/gtfierro/hod/master/buildings/berkeley.ttl&#34;&gt;Soda Hall Brick file&lt;/a&gt; preloaded.
The HTTP interface will be available at &lt;a href=&#34;http://localhost:47808&#34;&gt;http://localhost:47808&lt;/a&gt;; the exposed port is configurable via the &lt;code&gt;docker run&lt;/code&gt; command above.&lt;/p&gt;

&lt;p&gt;To build your own Docker image, use the template &lt;a href=&#34;https://github.com/gtfierro/brick_database_eval/tree/master/hod&#34;&gt;provided here&lt;/a&gt;, adjusting &lt;code&gt;build.sh&lt;/code&gt; and &lt;code&gt;Dockerfile&lt;/code&gt; to load the correct &lt;code&gt;.ttl&lt;/code&gt; file representing the building.&lt;/p&gt;

&lt;p&gt;As HodDB matures it will be possible to load buildings over the HTTP interface, but this is not currently supported.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;binary&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;binary&#34;&gt;Binary&lt;/h3&gt;

&lt;p&gt;To have slightly more control over the installation, a binary and configuration file can be downloaded from &lt;a href=&#34;https://github.com/gtfierro/hod/releases/latest&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This will require the installation of the &lt;a href=&#34;http://librdf.org/raptor/&#34;&gt;Raptor RDF Syntax Library&lt;/a&gt; and GraphViz, which can be done over &lt;code&gt;apt&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo apt install libraptor2-dev graphviz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After unpacking the archive, HodDB can be started via the command line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ./hod 
NAME:
   hod - BRICK database and query engine

USAGE:
   hod [global options] command [command options] [arguments...]

VERSION:
   0.2

COMMANDS:
     benchload  Benchmark loading a turtle file
     dump       Dump contents of turtle file
     viewclass  PDF visualization of class structure of file
     dumpgraph  PDF visualization of TTL file. WARNING this can get really big
     load       Load dataset into hoddb
     loadLinks  Load link json file into hoddb
     cli        Start hoddb from existing database
     http       Start hoddb HTTP server from existing database
     help, h    Shows a list of commands or help for one command

GLOBAL OPTIONS:
   --help, -h     show help
   --version, -v  print the version
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You may see an error print out looking something like&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./hod: /usr/local/lib/libraptor2.so.0: no version information available (required by ./hod)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;but HodDB should perform normally. Please &lt;a href=&#34;https://github.com/gtfierro/hod/issues&#34;&gt;file an issue&lt;/a&gt; if you notice anything.&lt;/p&gt;

&lt;p&gt;Note: current releases are just for 64-bit Linux. This will change as HodDB matures.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;source&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;source&#34;&gt;Source&lt;/h3&gt;

&lt;p&gt;HodDB can also be installed from source. This method is good for developing HodDB, or alternatively staying up to date with the &amp;ldquo;bleeding edge&amp;rdquo;, which is probably only good if you need the latest fixes and can&amp;rsquo;t wait for an official release.&lt;/p&gt;

&lt;p&gt;To install/update HodDB, you need &lt;a href=&#34;https://golang.org/doc/install&#34;&gt;Go&lt;/a&gt; installed and your &lt;code&gt;$GOPATH&lt;/code&gt; and &lt;code&gt;$GOROOT&lt;/code&gt; environment variables configured (how to set these is discussed in the Go installation guide), as well as &lt;code&gt;$GOPATH/bin&lt;/code&gt; added to your &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ go get -u github.com/gtfierro/hod
$ go install github.com/gtfierro/hod
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After this, then HodDB can be executed on the command line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ hod 
NAME:
   hod - BRICK database and query engine

USAGE:
   hod [global options] command [command options] [arguments...]

VERSION:
   0.2

COMMANDS:
     benchload  Benchmark loading a turtle file
     dump       Dump contents of turtle file
     viewclass  PDF visualization of class structure of file
     dumpgraph  PDF visualization of TTL file. WARNING this can get really big
     load       Load dataset into hoddb
     loadLinks  Load link json file into hoddb
     cli        Start hoddb from existing database
     http       Start hoddb HTTP server from existing database
     help, h    Shows a list of commands or help for one command

GLOBAL OPTIONS:
   --help, -h     show help
   --version, -v  print the version
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>http://hoddb.org/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://hoddb.org/configuration/</guid>
      <description>&lt;p&gt;HodDB is configured with a YAML file. By default, this file is called &lt;code&gt;hodconfig.yml&lt;/code&gt; and is loaded from the current directory, though this can be changed with the &lt;code&gt;--config/-c&lt;/code&gt; command line option when executing the &lt;code&gt;hod&lt;/code&gt; binary.&lt;/p&gt;

&lt;p&gt;Configuration defaults are as follows; there&amp;rsquo;s usually no reason to change these aside from the network configuration.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;### HodDB Configuration
# commented out lines are default configuration options

####
# Location and structure of database
####

# the location of the database files
#DBPath: _hoddb

# the path to the TTL file containing Brick relationships
#BrickFrameTTL: &amp;quot;BrickFrame.ttl&amp;quot;

# the path to the TTL file containing Brick classes
#BrickClassTTL: &amp;quot;Brick.ttl&amp;quot;

# whether or not to reload the Brick database files
#ReloadBrick: true

####
# configuration for verbosity during operation
####
#
# Show the namespace prefixes
#ShowNamespaces: true

# Show the built dependency graph of query terms
#ShowDependencyGraph: false

# Show the set of operations in the query plan
#ShowQueryPlan: false

# Show the latencies of creating the query plan
#ShowQueryPlanLatencies: false

# Show the latencies of each operation in the query plan
#ShowOperationLatencies: false

# Show the full latency of the query (and its larger components)
#ShowQueryLatencies: true


####
# HTTP Server Configuration
####

# port to run the server on
#ServerPort: 47808

# Whether or not to serve on IPv6
#UseIPv6: false

# Whether or not to serve on localhost. If false, serves on a public interface
#Localhost: true
#
# Path to the server directory of hod, which contains the necessary HTML files
#StaticPath: $GOPATH/src/github.com/gtfierro/hod/server

####
# Profiling Information for HTTP Server
####
# Note that best practices dictate that these be done in a mutually exclusive
# manner, e.g. do not enable CPU and MEM profiling at the same time because
# they will end up measuring the effect of measuring
# Also note that if you are trying to use the net/http/profile trick for generating
# torch graphs, you will need to keep these both at false

# Enable CPU profile
#EnableCPUProfile: false

# Enable MEM profile
#EnableMEMProfile: false

# Enable Block profile
#EnableBlockProfile: false
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Using HodDB</title>
      <link>http://hoddb.org/using/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://hoddb.org/using/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#loadingdata&#34;&gt;Loading Data&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#loadingbrick&#34;&gt;Loading Brick Files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#linksfile&#34;&gt;Links Files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#loadinglinks&#34;&gt;Loading Links Files&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cliqueries&#34;&gt;CLI Queries&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#cliconfigs&#34;&gt;CLI Configuration Options&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#httpapi&#34;&gt;HTTP API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#httpfront&#34;&gt;HTTP Frontend&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#tools&#34;&gt;Tools&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&#34;loadingdata&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;loading-data&#34;&gt;Loading Data&lt;/h3&gt;

&lt;h4 id=&#34;overview&#34;&gt;Overview&lt;/h4&gt;

&lt;p&gt;In Brick, buildings are described using RDF triples. These triples are stored in &lt;a href=&#34;https://www.w3.org/TR/turtle/&#34;&gt;Turtle (&lt;code&gt;.ttl&lt;/code&gt;) files&lt;/a&gt;, which can be loaded into a HodDB instance.&lt;/p&gt;

&lt;p&gt;HodDB stores buildings in a set of LevelDB databases; the location of these files is determined by the &lt;code&gt;DBPath&lt;/code&gt; configuration option which defaults to &lt;code&gt;./_hoddb&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In order to perform queries on the the database using the Brick classes and relationships, HodDB also needs to import the Turtle files that define the Brick schema. The location of these files are determined by the &lt;code&gt;BrickFrameTTL&lt;/code&gt; and &lt;code&gt;BrickClassTTL&lt;/code&gt; configuration options. The most recent version of these files can be downloaded from &lt;a href=&#34;http://brickschema.org/download/&#34;&gt;http://brickschema.org/download/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;loadingbrick&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;loading-brick-files&#34;&gt;Loading Brick Files&lt;/h4&gt;

&lt;p&gt;In order to load a &lt;code&gt;.ttl&lt;/code&gt; file, we use the &lt;code&gt;hod load&lt;/code&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ hod load buildings/berkeley.ttl
INFO actions.go:50 Dec 24 13:49:30  ▶ Loaded 3774 triples, 8 namespaces in 128.412302ms (29390/sec)
INFO db.go:454 Dec 24 13:49:31  ▶ Built lookup tables in 163.014409ms
INFO db.go:460 Dec 24 13:49:31  ▶ Built graph in 421.345208ms
rdf =&amp;gt; http://www.w3.org/1999/02/22-rdf-syntax-ns
rdfs =&amp;gt; http://www.w3.org/2000/01/rdf-schema
skos =&amp;gt; http://www.w3.org/2004/02/skos/core
bf =&amp;gt; http://buildsys.org/ontologies/BrickFrame
tag =&amp;gt; http://buildsys.org/ontologies/BrickTag
 =&amp;gt; http://buildsys.org/ontologies/Brick
owl =&amp;gt; http://www.w3.org/2002/07/owl
INFO db.go:454 Dec 24 13:49:32  ▶ Built lookup tables in 185.460746ms
INFO db.go:460 Dec 24 13:49:32  ▶ Built graph in 143.048733ms
tag =&amp;gt; http://buildsys.org/ontologies/BrickTag
 =&amp;gt; http://buildsys.org/ontologies/Brick
btag =&amp;gt; http://buildsys.org/ontologies/BrickTag
skos =&amp;gt; http://www.w3.org/2004/02/skos/core
bf =&amp;gt; http://buildsys.org/ontologies/BrickFrame
soda_hall =&amp;gt; http://buildsys.org/ontologies/building_example
xml =&amp;gt; http://www.w3.org/XML/1998/namespace
xsd =&amp;gt; http://www.w3.org/2001/XMLSchema
owl =&amp;gt; http://www.w3.org/2002/07/owl
rdf =&amp;gt; http://www.w3.org/1999/02/22-rdf-syntax-ns
rdfs =&amp;gt; http://www.w3.org/2000/01/rdf-schema
brick =&amp;gt; http://buildsys.org/ontologies/Brick
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Brick &lt;code&gt;ttl&lt;/code&gt; files are loaded implicitly when HodDB is invoked, using the paths provided in the configuration file.&lt;/p&gt;

&lt;p&gt;Loading is idempotent, meaning the same &lt;code&gt;.ttl&lt;/code&gt; file can be loaded many times without affecting the performance or correctness of the database.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&#34;http://hoddb.org/examples&#34;&gt;the examples page&lt;/a&gt; for a small TTL file sample.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: if more than one building is loaded into the same HodDB instance, then the results from the two buildings will be returned together and there is the possibility
for namespace conflicts. Thus, at this early stage in HodDB development it is recommended to have a different HodDB instance for each building. Disk space is negligible: the Soda Hall Brick file has 3774 triples in it, and the on-disk representation only uses 1.5 MB.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: right now, HodDB only supports loading in buildings via the command line. Future versions may allow loading buildings over HTTP.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;linksfile&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;links-file&#34;&gt;Links File&lt;/h4&gt;

&lt;p&gt;HodDB supports &amp;ldquo;links&amp;rdquo; which are simple string key-value pairs that act as pointers to external resources. Brick stores a representation of the structure and relationships for building subsystems, but only stores the edges and nodes in that graph.&lt;/p&gt;

&lt;p&gt;In a building operating system, there may be a set of associated resources for each &amp;ldquo;entity&amp;rdquo; in the building graph:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;UUID for associated timeseries streams&lt;/li&gt;
&lt;li&gt;Link to a driver implementation&lt;/li&gt;
&lt;li&gt;Link to a UI for the entity&lt;/li&gt;
&lt;li&gt;Link to documentation for the entity&lt;/li&gt;
&lt;li&gt;etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Rather than storing this information using RDF triples which would be verbose and cumbersome, HodDB uses a separate data model for storing such &amp;ldquo;links&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Links files use the full URIs of the graph entities, so make sure to note the building prefix when creating the links file.&lt;/p&gt;

&lt;p&gt;Links files are JSON and follow this structure:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
	// how to add 2 links to an entity
	&amp;quot;&amp;lt;full uri of building entity&amp;gt;&amp;quot;: {
		&amp;quot;&amp;lt;link name&amp;gt;&amp;quot;: &amp;quot;&amp;lt;link value&amp;gt;&amp;quot;,
		&amp;quot;&amp;lt;link name&amp;gt;&amp;quot;: &amp;quot;&amp;lt;link value&amp;gt;&amp;quot;
	},
	// deleting one link and adding another
	&amp;quot;&amp;lt;full uri of building entity&amp;gt;&amp;quot;: {
		&amp;quot;&amp;lt;link name&amp;gt;&amp;quot;: &amp;quot;&amp;quot;,
		&amp;quot;&amp;lt;link name&amp;gt;&amp;quot;: &amp;quot;&amp;lt;link value&amp;gt;&amp;quot;
	},
	// deleting all links for a given entity
	&amp;quot;&amp;lt;full uri of building entity&amp;gt;&amp;quot;: {}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;http://buildsys.org/ontologies/building_example#temp_sensor_hvac_zone_R739&amp;quot;: {
        &amp;quot;UUID&amp;quot;: &amp;quot;3a038c7c-c7e6-11e6-bfc1-1002b58053c7&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This associates the given UUID for a timeseries to the temperature sensor for Room 739 in the example building.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;loadinglinks&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;loading-links&#34;&gt;Loading Links&lt;/h4&gt;

&lt;p&gt;In order to load a JSON links file, we use the &lt;code&gt;hod loadLinks&lt;/code&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ hod loadLinks links.json
NOTICE actions.go:89 Dec 24 14:26:25  ▶ Adding 10 links, Removing 0 links
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a name=&#34;cliqueries&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;cli-queries&#34;&gt;CLI Queries&lt;/h3&gt;

&lt;p&gt;HodDB offers a command-line query interface which has the ability of exposing additional performance information as well as query planner details.
The visibility of this information is configurable in the HodDB configuration file.&lt;/p&gt;

&lt;p&gt;By default, the command-line query interface can be invoked using the &lt;code&gt;hod cli&lt;/code&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hod cli
Successfully loaded dataset!
(hod)&amp;gt; SELECT ?floor ?room ?zone
&amp;gt;&amp;gt;&amp;gt; ...WHERE {
&amp;gt;&amp;gt;&amp;gt; ...    ?floor rdf:type brick:Floor .
&amp;gt;&amp;gt;&amp;gt; ...    ?room rdf:type brick:Room .
&amp;gt;&amp;gt;&amp;gt; ...    ?zone rdf:type brick:HVAC_Zone .
&amp;gt;&amp;gt;&amp;gt; ...    ?room bf:isPartOf+ ?floor .
&amp;gt;&amp;gt;&amp;gt; ...    ?room bf:isPartOf+ ?zone .
&amp;gt;&amp;gt;&amp;gt; ...};
INFO query.go:58 Dec 24 15:35:51  ▶ Ran query in 16.58933ms
INFO query.go:64 Dec 24 15:35:51  ▶ Expanded tuples in 10.785491ms
NOTICE api.go:60 Dec 24 15:35:51  ▶ Full Query took 28.42414ms
map[?zone:http://buildsys.org/ontologies/building_example#hvac_zone_C180 ?floor:http://buildsys.org/ontologies/building_example#floor_1 ?room:http://buildsys.org/ontologies/building_example#room_C180]
map[?floor:http://buildsys.org/ontologies/building_example#floor_1 ?room:http://buildsys.org/ontologies/building_example#room_R181 ?zone:http://buildsys.org/ontologies/building_example#hvac_zone_R181]
map[?room:http://buildsys.org/ontologies/building_example#room_R184 ?zone:http://buildsys.org/ontologies/building_example#hvac_zone_R184 ?floor:http://buildsys.org/ontologies/building_example#floor_1]
map[?floor:http://buildsys.org/ontologies/building_example#floor_1 ?room:http://buildsys.org/ontologies/building_example#room_R187A ?zone:http://buildsys.org/ontologies/building_example#hvac_zone_R187A]
map[?zone:http://buildsys.org/ontologies/building_example#hvac_zone_R190A ?floor:http://buildsys.org/ontologies/building_example#floor_1 ?room:http://buildsys.org/ontologies/building_example#room_R190A]
map[?floor:http://buildsys.org/ontologies/building_example#floor_1 ?room:http://buildsys.org/ontologies/building_example#room_R190B ?zone:http://buildsys.org/ontologies/building_example#hvac_zone_R190B]
map[?room:http://buildsys.org/ontologies/building_example#room_R252 ?zone:http://buildsys.org/ontologies/building_example#hvac_zone_R252 ?floor:http://buildsys.org/ontologies/building_example#floor_2]
map[?floor:http://buildsys.org/ontologies/building_example#floor_2 ?room:http://buildsys.org/ontologies/building_example#room_R283E ?zone:http://buildsys.org/ontologies/building_example#hvac_zone_R283E]
map[?zone:http://buildsys.org/ontologies/building_example#hvac_zone_R287 ?floor:http://buildsys.org/ontologies/building_example#floor_2 ?room:http://buildsys.org/ontologies/building_example#room_R287]
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: only a single HodDB instance can be started for a set of backing files, i.e. you cannot run both the CLI and HTTP interface simultaneously.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;cliconfigs&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;config-showdependencygraph&#34;&gt;Config: &lt;code&gt;ShowDependencyGraph&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;(Defaults to &lt;code&gt;false&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;If &lt;code&gt;true&lt;/code&gt;, then HodDB will print out the dependency graph generated from the provided query, which is used as input into the query planner.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hod cli
Successfully loaded dataset!
(hod)&amp;gt; SELECT ?floor ?room ?zone
&amp;gt;&amp;gt;&amp;gt; ...WHERE {
&amp;gt;&amp;gt;&amp;gt; ...    ?floor rdf:type brick:Floor .
&amp;gt;&amp;gt;&amp;gt; ...    ?room rdf:type brick:Room .
&amp;gt;&amp;gt;&amp;gt; ...    ?zone rdf:type brick:HVAC_Zone .
&amp;gt;&amp;gt;&amp;gt; ...    ?room bf:isPartOf+ ?floor .
&amp;gt;&amp;gt;&amp;gt; ...    ?room bf:isPartOf+ ?zone .
&amp;gt;&amp;gt;&amp;gt; ...};
 &amp;lt;?zone [{http://www.w3.org/1999/02/22-rdf-syntax-ns#type }] http://buildsys.org/ontologies/Brick#HVAC_Zone&amp;gt;
 &amp;lt;?room [{http://www.w3.org/1999/02/22-rdf-syntax-ns#type }] http://buildsys.org/ontologies/Brick#Room&amp;gt;
   &amp;lt;?room [{http://buildsys.org/ontologies/BrickFrame#isPartOf +}] ?zone&amp;gt;
 &amp;lt;?floor [{http://www.w3.org/1999/02/22-rdf-syntax-ns#type }] http://buildsys.org/ontologies/Brick#Floor&amp;gt;
   &amp;lt;?room [{http://buildsys.org/ontologies/BrickFrame#isPartOf +}] ?floor&amp;gt;
INFO query.go:58 Dec 24 15:43:33  ▶ Ran query in 16.422681ms
INFO query.go:64 Dec 24 15:43:33  ▶ Expanded tuples in 10.002746ms
NOTICE api.go:60 Dec 24 15:43:33  ▶ Full Query took 31.336022ms
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;config-showqueryplan&#34;&gt;Config: &lt;code&gt;ShowQueryPlan&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;(Defaults to &lt;code&gt;false&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;If &lt;code&gt;true&lt;/code&gt;, then HodDB will print out the generated query plan for the provided query, showing which low-level operations are being run over the underlying structure.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hod cli
Successfully loaded dataset!
(hod)&amp;gt; SELECT ?floor ?room ?zone
&amp;gt;&amp;gt;&amp;gt; ...WHERE {
&amp;gt;&amp;gt;&amp;gt; ...    ?floor rdf:type brick:Floor .
&amp;gt;&amp;gt;&amp;gt; ...    ?room rdf:type brick:Room .
&amp;gt;&amp;gt;&amp;gt; ...    ?zone rdf:type brick:HVAC_Zone .
&amp;gt;&amp;gt;&amp;gt; ...    ?room bf:isPartOf+ ?floor .
&amp;gt;&amp;gt;&amp;gt; ...    ?room bf:isPartOf+ ?zone .
&amp;gt;&amp;gt;&amp;gt; ...};
-------------- start query plan -------------
DEBUG query.go:45 Dec 24 15:47:00  ▶ op [resolveSubject &amp;lt;?floor [{http://www.w3.org/1999/02/22-rdf-syntax-ns#type }] http://buildsys.org/ontologies/Brick#Floor&amp;gt;]
DEBUG query.go:45 Dec 24 15:47:00  ▶ op [resolveSubject &amp;lt;?room [{http://www.w3.org/1999/02/22-rdf-syntax-ns#type }] http://buildsys.org/ontologies/Brick#Room&amp;gt;]
DEBUG query.go:45 Dec 24 15:47:00  ▶ op [resolveSubject &amp;lt;?zone [{http://www.w3.org/1999/02/22-rdf-syntax-ns#type }] http://buildsys.org/ontologies/Brick#HVAC_Zone&amp;gt;]
DEBUG query.go:45 Dec 24 15:47:00  ▶ op [restrictSubObjByPred &amp;lt;?room [{http://buildsys.org/ontologies/BrickFrame#isPartOf +}] ?floor&amp;gt;]
DEBUG query.go:45 Dec 24 15:47:00  ▶ op [restrictSubObjByPred &amp;lt;?room [{http://buildsys.org/ontologies/BrickFrame#isPartOf +}] ?zone&amp;gt;]
-------------- end query plan -------------
INFO query.go:58 Dec 24 15:47:00  ▶ Ran query in 26.436114ms
INFO query.go:64 Dec 24 15:47:00  ▶ Expanded tuples in 7.149802ms
NOTICE api.go:60 Dec 24 15:47:00  ▶ Full Query took 35.000475ms
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;config-showqueryplanlatencies&#34;&gt;Config: &lt;code&gt;ShowQueryPlanLatencies&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;(Defaults to &lt;code&gt;false&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;If &lt;code&gt;true&lt;/code&gt;, then HodDB will print out the time to execute each step of the query plan, which can be helpful for debugging slow queries.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hod cli
Successfully loaded dataset!
(hod)&amp;gt; SELECT ?floor ?room ?zone
&amp;gt;&amp;gt;&amp;gt; ...WHERE {
&amp;gt;&amp;gt;&amp;gt; ...    ?floor rdf:type brick:Floor .
&amp;gt;&amp;gt;&amp;gt; ...    ?room rdf:type brick:Room .
&amp;gt;&amp;gt;&amp;gt; ...    ?zone rdf:type brick:HVAC_Zone .
&amp;gt;&amp;gt;&amp;gt; ...    ?room bf:isPartOf+ ?floor .
&amp;gt;&amp;gt;&amp;gt; ...    ?room bf:isPartOf+ ?zone .
&amp;gt;&amp;gt;&amp;gt; ...};
INFO query.go:49 Dec 24 15:49:04  ▶ Formed execution plan in 47.007µs
[resolveSubject &amp;lt;?floor [{http://www.w3.org/1999/02/22-rdf-syntax-ns#type }] http://buildsys.org/ontologies/Brick#Floor&amp;gt;] 201.308µs
[resolveSubject &amp;lt;?room [{http://www.w3.org/1999/02/22-rdf-syntax-ns#type }] http://buildsys.org/ontologies/Brick#Room&amp;gt;] 416.97µs
[resolveSubject &amp;lt;?zone [{http://www.w3.org/1999/02/22-rdf-syntax-ns#type }] http://buildsys.org/ontologies/Brick#HVAC_Zone&amp;gt;] 386.676µs
[restrictSubObjByPred &amp;lt;?room [{http://buildsys.org/ontologies/BrickFrame#isPartOf +}] ?floor&amp;gt;] 8.29247ms
[restrictSubObjByPred &amp;lt;?room [{http://buildsys.org/ontologies/BrickFrame#isPartOf +}] ?zone&amp;gt;] 10.253657ms
INFO query.go:58 Dec 24 15:49:04  ▶ Ran query in 19.647705ms
INFO query.go:64 Dec 24 15:49:04  ▶ Expanded tuples in 7.858543ms
NOTICE api.go:60 Dec 24 15:49:04  ▶ Full Query took 28.793678ms
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;config-showquerylatencies&#34;&gt;Config: &lt;code&gt;ShowQueryLatencies&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Defaults to &lt;code&gt;true&lt;/code&gt;; shows the runtime, tuple-expansion and overall total time to execute the query. Note that this is slightly more accurate than the times shown in the HTTP interface because those involve network and browser overhead.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;httpapi&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;http-api&#34;&gt;HTTP API&lt;/h3&gt;

&lt;p&gt;The HodDB HTTP server can be started on the command line via:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hod http
NOTICE server.go:78 Dec 24 17:28:53  ▶ Starting HTTP Server on  localhost:47808
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The served port can be configured using the &lt;code&gt;ServerPort&lt;/code&gt; config option. IPv6 and public/localhost serving are configured via the &lt;code&gt;UseIPv6&lt;/code&gt; and &lt;code&gt;Localhost&lt;/code&gt; fields respectively.&lt;/p&gt;

&lt;p&gt;The exposed endpoints are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/api/query&lt;/code&gt;: receives POST requests containing a query string, returns JSON encoded results of the query&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/api/loadlinks&lt;/code&gt;: receives POST requests containing a JSON-encoded links file. Returns 200 or error.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/api/querydot&lt;/code&gt;: receives POST requests containing a query string, returns a GraphViz compatible DOT representation of the query as a string.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&#34;httpfront&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;http-frontend&#34;&gt;HTTP Frontend&lt;/h3&gt;

&lt;p&gt;There is a prototype HodDB interactive query interface available at the base URI, &lt;a href=&#34;http://localhost:47808&#34;&gt;http://localhost:47808&lt;/a&gt;.
It has its own set of documentation at &lt;a href=&#34;http://localhost:47808/help&#34;&gt;http://localhost:47808/help&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;tools&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;other-tools&#34;&gt;Other Tools&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;hod&lt;/code&gt; tool has a collection of other tools that may be useful. Use the &lt;code&gt;-h&lt;/code&gt; flag on any of these to get more documentation on their usage.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;hod dumpgraph&lt;/code&gt;: creates a PDF visualization of the nodes and entities in a TTL file. Warning! This can get very big and intractable.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;hod dump&lt;/code&gt;: prints out the contents of a TTL file as a set of tab-separated triples&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;hod benchload&lt;/code&gt;: benchmarks the parsing time of a specified TTL file&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Making a Brick Model</title>
      <link>http://hoddb.org/making/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://hoddb.org/making/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#rdftriples&#34;&gt;RDF Triples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#examplebuilding&#34;&gt;Example Building&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#usingrdflib&#34;&gt;Creating the Brick Model&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here we review the construction and Brick representation of a small example building.&lt;/p&gt;

&lt;h3 id=&#34;data-model&#34;&gt;Data Model&lt;/h3&gt;

&lt;p&gt;Brick can be thought of as a vocabulary for describing the things in the building and how they relate to each other.
In Brick, names for things are referred to as &lt;strong&gt;tagsets&lt;/strong&gt; and names for how these things are connected are called &lt;strong&gt;relationships&lt;/strong&gt;.
For example, an instance of a &lt;code&gt;VAV&lt;/code&gt; would have a &lt;code&gt;feeds&lt;/code&gt; relationship with an &lt;code&gt;HVAC_Zone&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The Brick vocabulary and class structure are available at &lt;a href=&#34;http://brickschema.org/download/&#34;&gt;brickschema.org&lt;/a&gt;.
The best way to view the file is either using the &lt;a href=&#34;http://protege.stanford.edu/&#34;&gt;Protege&lt;/a&gt; tool or Python&amp;rsquo;s &lt;a href=&#34;https://rdflib.readthedocs.io/&#34;&gt;rdflib&lt;/a&gt; library.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;rdftriples&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;rdf-triples&#34;&gt;RDF Triples&lt;/h4&gt;

&lt;p&gt;To use these names to describe a building, we construct tuples consisting following the form of:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;subject predicate object
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where &lt;code&gt;subject&lt;/code&gt; and &lt;code&gt;object&lt;/code&gt; are both &lt;strong&gt;tagsets&lt;/strong&gt; and &lt;code&gt;predicate&lt;/code&gt; is a &lt;strong&gt;relationship&lt;/strong&gt;. This is known as an &lt;strong&gt;RDF triple&lt;/strong&gt;, which we will abbreviate to &amp;ldquo;triple&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Each triple represents 2 nodes (the subject and object) connected with a directed edge (the predicate):&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../img/subpredobj.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;A collection of triples describing a building thus create what we call the &amp;ldquo;building graph&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;When we write down a subject, predicate or object, we refer to it in terms of its &lt;strong&gt;namespace&lt;/strong&gt;.
The Brick class namespace is &lt;code&gt;http://brickschema.org/ttl/Brick.ttl#&lt;/code&gt;, the RDF namespace is &lt;code&gt;https://www.w3.org/1999/02/22-rdf-syntax-ns#&lt;/code&gt;, etc.
The concatenation of a subject/predicate/object and its namespace forms a &lt;strong&gt;URI&lt;/strong&gt;.
For example, the &lt;code&gt;VAV&lt;/code&gt; Brick class has the URI &lt;code&gt;http://brickschema.org/ttl/Brick.ttl#VAV&lt;/code&gt;.
Using &lt;strong&gt;prefix declarations&lt;/strong&gt;, we can define a shortcut for the long namespaces; in Turtle files (described below), a prefix declaration takes the form of&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;@prefix bf:  &amp;lt;http://buildsys.org/ontologies/BrickFrame#&amp;gt; .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This defines the prefix &lt;code&gt;bf&lt;/code&gt; to be used instead of the full namespace. We can now write the URI  &lt;code&gt;http://brickschema.org/ttl/BrickFrame.ttl#feeds&lt;/code&gt; as &lt;code&gt;bf:feeds&lt;/code&gt;. These tend to be consistent so as not to cause confusion. Here&amp;rsquo;s the set of abbreviations used in and by Brick:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Prefix&lt;/th&gt;
&lt;th&gt;Namespace&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;bf&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;http://brickschema.org/ttl/BrickFrame&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;brick&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;http://brickschema.org/ttl/Brick&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;rdf&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;http://www.w3.org/1999/02/22-rdf-syntax-ns&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;rdfs&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;http://www.w3.org/2000/01/rdf-schema&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;owl&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;http://www.w3.org/2002/07/owl&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;xml&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;http://www.w3.org/XML/1998/namespace&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;skos&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;http://www.w3.org/2004/02/skos/core&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;xsd&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;http://www.w3.org/2001/XMLSchema&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;tag&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;http://brickschema.org/ttl/BrickTag&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;When forming the set of triples that constitute the Brick representation of a building, we use relationships defined by the Brick vocabulary as well as a few standard relationships, namely the &lt;code&gt;rdf:type&lt;/code&gt; (which instantiates Brick classes) and &lt;code&gt;rdfs:subClassOf&lt;/code&gt; which allows traversal of the class structure and creation of new subclasses.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;examplebuilding&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;example-building&#34;&gt;Example Building&lt;/h4&gt;

&lt;p&gt;Our example building contains the following components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;one floor (&lt;code&gt;floor_1&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;one room on the floor (&lt;code&gt;room_1&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;one HVAC zone, containing the one room (&lt;code&gt;hvaczone_1&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;one zone temperature sensor in the room (&lt;code&gt;ztemp_1&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;one VAV supplying the HVAC zone (&lt;code&gt;vav_1&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;one AHU supplying the VAV (&lt;code&gt;ahu_1&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Brick model of these relationships will be the triples representing the following graph&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../img/building_graph_noclass.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Missing from this representation are the instantiations of Brick classes; we need to declare that &lt;code&gt;floor&lt;/code&gt; is of type &lt;code&gt;brick:Floor&lt;/code&gt; and so on. This uses the &lt;code&gt;rdf:type&lt;/code&gt; relationship.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../img/building_graph.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This graph would be defined by this set of triples:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mybuilding:ahu_1         rdf:type        brick:AHU
mybuilding:room_1        rdf:type        brick:Room
mybuilding:ztemp_1       rdf:type        brick:Zone_Temperature_Sensor
mybuilding:floor_1       rdf:type        brick:Floor
mybuilding:hvaczone_1    rdf:type        brick:HVAC_Zone
mybuilding:vav_1         rdf:type        brick:VAV
mybuilding:ahu_1         bf:feeds        mybuilding:vav_1
mybuilding:room_1        bf:isPartOf     mybuilding:floor_1
mybuilding:room_1        bf:isPartOf     mybuilding:hvaczone_1
mybuilding:ztemp_1       bf:isPointOf    mybuilding:vav_1
mybuilding:vav_1         bf:feeds        mybuilding:hvaczone_1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that we are using a &lt;em&gt;distinct&lt;/em&gt; prefix to &amp;ldquo;store&amp;rdquo; the names of the entities that are actually in our building.&lt;/p&gt;

&lt;p&gt;Triples are usually stored in a self-contained file in the &lt;strong&gt;Turtle format&lt;/strong&gt;, which usually has the filename suffix &lt;code&gt;.ttl&lt;/code&gt;. Here&amp;rsquo;s the Turtle file for the example building:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ttl&#34;&gt;@prefix brick: &amp;lt;http://brickschema.org/ttl/Brick#&amp;gt; .
@prefix bf: &amp;lt;http://brickschema.org/ttl/BrickFrame#&amp;gt; .
@prefix rdf: &amp;lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&amp;gt; .
@prefix rdfs: &amp;lt;http://www.w3.org/2000/01/rdf-schema#&amp;gt; .
@prefix mybuilding: &amp;lt;http://mysite.com/buildings/mybuilding#&amp;gt; .

mybuilding:ahu_1 a brick:AHU ;
    bf:feeds mybuilding:vav_1 .

mybuilding:room_1 a brick:Room ;
    bf:isPartOf mybuilding:floor_1,
        mybuilding:hvaczone_1 .

mybuilding:ztemp_1 a brick:Zone_Temperature_Sensor ;
    bf:isPointOf mybuilding:vav_1 .

mybuilding:floor_1 a brick:Floor .

mybuilding:hvaczone_1 a brick:HVAC_Zone .

mybuilding:vav_1 a brick:VAV ;
    bf:feeds mybuilding:hvaczone_1 .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a name=&#34;usingrdflib&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;creating-the-example-building&#34;&gt;Creating the Example Building&lt;/h4&gt;

&lt;p&gt;&amp;ldquo;Creating&amp;rdquo; the Brick model for a building consists of making the &lt;strong&gt;Turtle&lt;/strong&gt; containing the triples that describe the building. While possible to create by hand, for larger buildings it makes more sense to automate this process.&lt;/p&gt;

&lt;p&gt;We use Python&amp;rsquo;s &lt;code&gt;rdflib&lt;/code&gt; to create this file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from rdflib import Graph, Namespace, URIRef, Literal

# define the namespaces. Now we can refer to entities 
# in the namespacing using these handles.
# For example, the VAV class in the Brick namespace 
# could be referenced as BRICK.VAV or BRICK[&amp;quot;VAV&amp;quot;]
BRICK = Namespace(&amp;quot;http://brickschema.org/ttl/Brick#&amp;quot;)
BF = Namespace(&amp;quot;http://brickschema.org/ttl/BrickFrame#&amp;quot;)
RDF = Namespace(&amp;quot;http://www.w3.org/1999/02/22-rdf-syntax-ns#&amp;quot;)
RDFS = Namespace(&amp;quot;http://www.w3.org/2000/01/rdf-schema#&amp;quot;)
MYBUILDING = Namespace(&amp;quot;http://mysite.com/buildings/mybuilding#&amp;quot;)

# create the graph and bind the namespace prefixes to it
g = rdflib.Graph()
g.bind(&#39;rdf&#39;, RDF)
g.bind(&#39;rdfs&#39;, RDFS)
g.bind(&#39;brick&#39;, BRICK)
g.bind(&#39;bf&#39;, BF)
g.bind(&#39;mybuilding&#39;, MYBUILDING)

# add() inserts another triple into the graph as (subject, predicate, object)
g.add((MYBUILDING.floor_1, RDF.type, BRICK.Floor))
g.add((MYBUILDING.room_1, RDF.type, BRICK.Room))
g.add((MYBUILDING.vav_1, RDF.type, BRICK.VAV))
g.add((MYBUILDING.hvaczone_1, RDF.type, BRICK.HVAC_Zone))
g.add((MYBUILDING.ahu_1, RDF.type, BRICK.AHU))
g.add((MYBUILDING.ztemp_1, RDF.type, BRICK.Zone_Temperature_Sensor))


# add the relationships constituting the other edges in the graph
g.add((EX.ztemp_1, BF.isPointOf, EX.vav_1))
g.add((EX.ahu_1, BF.feeds, EX.vav_1))
g.add((EX.vav_1, BF.feeds, EX.hvaczone_1))
g.add((EX.room_1, BF.isPartOf, EX.hvaczone_1))
g.add((EX.room_1, BF.isPartOf, EX.floor_1))

# save the output to &amp;quot;mybuilding.ttl&amp;quot;
g.serialize(destination=&#39;mybuilding.ttl&#39;,format=&#39;turtle&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Real-world examples of this kind of code for some real buildings can be found &lt;a href=&#34;https://github.com/BuildSysUniformMetadata/GroundTruth/tree/master/etc/instance_generators&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Query Language</title>
      <link>http://hoddb.org/query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://hoddb.org/query/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;HodDB Query language:

&lt;ul&gt;
&lt;li&gt;basics:

&lt;ul&gt;
&lt;li&gt;prefixes&lt;/li&gt;
&lt;li&gt;triples&lt;/li&gt;
&lt;li&gt;path types&lt;/li&gt;
&lt;li&gt;OR clauses&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;links&lt;/li&gt;
&lt;li&gt;example queries explained!&lt;/li&gt;
&lt;li&gt;make sure to have figures&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Benchmarks</title>
      <link>http://hoddb.org/benchmarks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://hoddb.org/benchmarks/</guid>
      <description>

&lt;p&gt;Some initial benchmarks of HodDB&lt;/p&gt;

&lt;p&gt;All code can be found at &lt;a href=&#34;https://github.com/gtfierro/brick_database_eval&#34;&gt;https://github.com/gtfierro/brick_database_eval&lt;/a&gt;.
Just run the Jupyter notebook and make sure Docker is installed.&lt;/p&gt;

&lt;p&gt;Databases evaluated here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jena.apache.org/documentation/serving_data/&#34;&gt;Jena/Fuseki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://franz.com/agraph/downloads/&#34;&gt;alegrograph&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gh-rdf3x/gh-rdf3x&#34;&gt;rdf3x&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://rdflib.readthedocs.io/en/stable/&#34;&gt;rdflib&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;hoddb.org&#34;&gt;hoddb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Jena/Fuseki only completed in a reasonable time on the first, trivial, query&lt;/li&gt;
&lt;li&gt;RDF3X is consistently the fastest, but has the following issues:

&lt;ul&gt;
&lt;li&gt;cannot use underscores in node/edge names&lt;/li&gt;
&lt;li&gt;cannot use &lt;code&gt;*&lt;/code&gt; or &lt;code&gt;+&lt;/code&gt; operators on predicates&lt;/li&gt;
&lt;li&gt;cannot use UNION&lt;/li&gt;
&lt;li&gt;does not support loading multiple graphs&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;query-1&#34;&gt;Query 1&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sparql&#34;&gt;SELECT ?vav
WHERE {
    ?vav rdf:type brick:VAV .
}
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Database&lt;/th&gt;
&lt;th&gt;Avg Execution Time (ms)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;alegro&lt;/td&gt;
&lt;td&gt;9.71&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;fuseki&lt;/td&gt;
&lt;td&gt;12.87&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;rdf3x&lt;/td&gt;
&lt;td&gt;5.92&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;rdflib&lt;/td&gt;
&lt;td&gt;29.40&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;hod&lt;/td&gt;
&lt;td&gt;7.58&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;query-2&#34;&gt;Query 2&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sparql&#34;&gt;SELECT DISTINCT ?sensor ?room
WHERE {

    ?sensor rdf:type/rdfs:subClassOf* brick:Zone_Temperature_Sensor .
    ?room rdf:type brick:Room .
    ?vav rdf:type brick:VAV .
    ?zone rdf:type brick:HVAC_Zone .

    ?vav bf:feeds+ ?zone .
    ?zone bf:hasPart ?room .

    {?sensor bf:isPointOf ?vav }
    UNION
    {?sensor bf:isPointOf ?room }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Database&lt;/th&gt;
&lt;th&gt;Avg Execution Time (ms)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;alegro&lt;/td&gt;
&lt;td&gt;1714.37&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;fuseki&lt;/td&gt;
&lt;td&gt;24977452.12 (~7 hours)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;rdf3x&lt;/td&gt;
&lt;td&gt;9.86&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;rdflib&lt;/td&gt;
&lt;td&gt;11967.27&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;hod&lt;/td&gt;
&lt;td&gt;18.66&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;query-3&#34;&gt;Query 3&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sparql&#34;&gt;SELECT ?vlv_cmd ?vav
WHERE {
    {
      { ?vlv_cmd rdf:type brick:Reheat_Valve_Command }
      UNION
      { ?vlv_cmd rdf:type brick:Cooling_Valve_Command }
    }
    ?vav rdf:type brick:VAV .
    ?vav bf:hasPoint+ ?vlv_cmd .
}
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Database&lt;/th&gt;
&lt;th&gt;Avg Execution Time (ms)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;alegro&lt;/td&gt;
&lt;td&gt;792.135339&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;rdf3x&lt;/td&gt;
&lt;td&gt;7.225884&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;rdflib&lt;/td&gt;
&lt;td&gt;6186.903193&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;hod&lt;/td&gt;
&lt;td&gt;18.360305&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;query-4&#34;&gt;Query 4&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sparql&#34;&gt;SELECT ?floor ?room ?zone
WHERE {
    ?floor rdf:type brick:Floor .
    ?room rdf:type brick:Room .
    ?zone rdf:type brick:HVAC_Zone .

    ?room bf:isPartOf+ ?floor .
    ?room bf:isPartOf+ ?zone .
}
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Database&lt;/th&gt;
&lt;th&gt;Avg Execution Time (ms)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;alegro&lt;/td&gt;
&lt;td&gt;109.66&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;rdf3x&lt;/td&gt;
&lt;td&gt;9.25&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;rdflib&lt;/td&gt;
&lt;td&gt;421.21&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;hod&lt;/td&gt;
&lt;td&gt;38.24&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://hoddb.org/outline/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://hoddb.org/outline/</guid>
      <description>&lt;p&gt;An outline for the documentation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Index Page:

&lt;ul&gt;
&lt;li&gt;brief introduction (and links) to Brick&lt;/li&gt;
&lt;li&gt;identify need for fast Brick database&lt;/li&gt;
&lt;li&gt;HodDB features:

&lt;ul&gt;
&lt;li&gt;sub 100ms queries&lt;/li&gt;
&lt;li&gt;links to external services such as timeseries uuids&lt;/li&gt;
&lt;li&gt;history of building configuration (work-in-progress)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Installing/Buildiing HodDB&lt;/li&gt;
&lt;li&gt;Configuring HodDB&lt;/li&gt;
&lt;li&gt;Using HodDB

&lt;ul&gt;
&lt;li&gt;Loading data into HodDB&lt;/li&gt;
&lt;li&gt;CLI queries&lt;/li&gt;
&lt;li&gt;HTTP server + features&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;HodDB Query language:

&lt;ul&gt;
&lt;li&gt;basics:

&lt;ul&gt;
&lt;li&gt;prefixes&lt;/li&gt;
&lt;li&gt;triples&lt;/li&gt;
&lt;li&gt;path types&lt;/li&gt;
&lt;li&gt;OR clauses&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;links&lt;/li&gt;
&lt;li&gt;example queries explained!&lt;/li&gt;
&lt;li&gt;make sure to have figures&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Quickstart!

&lt;ul&gt;
&lt;li&gt;all the commands in one place, high level and brief explanations&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>HodDB</title>
      <link>http://hoddb.org/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://hoddb.org/</guid>
      <description>

&lt;h2 id=&#34;a-database-for-brick&#34;&gt;A Database for Brick&lt;/h2&gt;

&lt;p&gt;HodDB is a database for storing &lt;a href=&#34;http://brickschema.org/&#34;&gt;Brick&lt;/a&gt; models of buildings and serving queries on those models. More generally, it is an RDF triplestore with limited reasoning support, but many other features.&lt;/p&gt;

&lt;p&gt;HodDB has the following goals:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;sub-100ms SPARQL queries on small graphs (buildings are typically &amp;lt; 100,000 triples)&lt;/li&gt;
&lt;li&gt;facilitate integration with external services:

&lt;ul&gt;
&lt;li&gt;attach key-value &amp;ldquo;links&amp;rdquo; such as timeseries UUIDs or application URIs&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;store the history of changes to the Brick model of the building

&lt;ul&gt;
&lt;li&gt;(currently under development)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;quickstart&#34;&gt;Quickstart&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo apt install libraptor2-dev graphviz
$ go get github.com/gtfierro/hod
$ go install github.com/gtfierro/hod
$ hod load path/to/building.ttl
$ hod http
NOTICE server.go:84 Dec 28 21:37:56  ▶ Starting HTTP Server on  0.0.0.0:47808
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;public-query-server&#34;&gt;Public Query Server&lt;/h3&gt;

&lt;p&gt;Available at &lt;a href=&#34;http://query.hoddb.org/&#34;&gt;http://query.hoddb.org/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>