<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>HodDB</title>
    <link>https://hoddb.org/</link>
    <description>Recent content on HodDB</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://hoddb.org/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Installation</title>
      <link>https://hoddb.org/installation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hoddb.org/installation/</guid>
      <description>Docker Binary Source  
Docker If you have Docker installed, then HodDB can be started by pulling the gtfierro/hod:latest Docker image and then starting it with the appropriate parameters. HodDB requires a directory containing a configuration file and the Brick models. When we start the Docker container, we need to mount this directory (referred to as localpath below):
$ docker pull gtfierro/hod:latest # you can change &#39;configdir&#39; to whatever local path $ docker run -d --name hod -v configdir:/etc/hod -p 47808:47808 gtfierro/hod:latest  You should place the following inside the directory that gets mounted to /etc/hod</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>https://hoddb.org/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hoddb.org/configuration/</guid>
      <description>HodDB is configured with a YAML file. By default, this file is called hodconfig.yml and is loaded from the current directory, though this can be changed with the --config/-c command line option when executing the hod binary. All paths below are relative to the location from which hod is executed.
Configuration defaults are as follows; there&amp;rsquo;s usually no reason to change these aside from the list of buildings to load and the network configuration.</description>
    </item>
    
    <item>
      <title>Using HodDB</title>
      <link>https://hoddb.org/using/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hoddb.org/using/</guid>
      <description>Loading Data  Loading Brick Files  CLI Queries  CLI Configuration Options  HTTP API HTTP Frontend BOSSWAVE API Tools  
Loading Data Overview In Brick, buildings are described using RDF triples. These triples are stored in Turtle (.ttl) files, which can be loaded into a HodDB instance.
HodDB stores buildings in a set of LevelDB databases; the location of these files is determined by the DBPath configuration option which defaults to .</description>
    </item>
    
    <item>
      <title>Making a Brick Model</title>
      <link>https://hoddb.org/making/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hoddb.org/making/</guid>
      <description>RDF Triples Example Building Creating the Brick Model  Here we review the construction and Brick representation of a small example building.
Data Model Brick can be thought of as a vocabulary for describing the things in the building and how they relate to each other. In Brick, names for things are referred to as tagsets and names for how these things are connected are called relationships. For example, an instance of a VAV would have a feeds relationship with an HVAC_Zone.</description>
    </item>
    
    <item>
      <title>Query Language</title>
      <link>https://hoddb.org/query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hoddb.org/query/</guid>
      <description>Here we present an overview of the SPARQL-like query language implemented by Hod
 HodDB Query language:  basics:  prefixes triples path types OR clauses  links example queries explained! make sure to have figures   </description>
    </item>
    
    <item>
      <title>Benchmarks</title>
      <link>https://hoddb.org/benchmarks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hoddb.org/benchmarks/</guid>
      <description>Some initial benchmarks of HodDB
All code can be found at https://github.com/gtfierro/brick_database_eval. Just run the Jupyter notebook and make sure Docker is installed.
Databases evaluated here:
 Jena/Fuseki alegrograph rdf3x rdflib hoddb  Notes:
 Jena/Fuseki only completed in a reasonable time on the first, trivial, query RDF3X is consistently the fastest, but has the following issues:  cannot use underscores in node/edge names cannot use * or + operators on predicates cannot use UNION does not support loading multiple graphs   Query 1 SELECT ?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hoddb.org/outline/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hoddb.org/outline/</guid>
      <description>An outline for the documentation:
 Index Page:  brief introduction (and links) to Brick identify need for fast Brick database HodDB features:  sub 100ms queries links to external services such as timeseries uuids history of building configuration (work-in-progress)   Installing/Buildiing HodDB Configuring HodDB Using HodDB  Loading data into HodDB CLI queries HTTP server + features  HodDB Query language:  basics:  prefixes triples path types OR clauses  links example queries explained!</description>
    </item>
    
    <item>
      <title>HodDB</title>
      <link>https://hoddb.org/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hoddb.org/</guid>
      <description>A Database for Brick HodDB is a specialized RDF database and SPARQL query processor for Brick. It stores models of buildings and serves queries on those models.
HodDB has the following features:
 sub-100ms SPARQL queries on Brick graphsmodels web interface for interacting with Brick models BOSSWAVE integration integration with external services:  uses Literals to store timeseries UUIDs or application URIs   Quickstart These will be updated soon!</description>
    </item>
    
  </channel>
</rss>